{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Project\\\\af2\\\\TimeTracker_SLPA\\\\frontend\\\\src\\\\components\\\\dashboard\\\\GroupReport.jsx\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupReport = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  reportData,\n  getHeaders,\n  formatRow,\n  reportType,\n  dateRange\n}, ref) => {\n  _s();\n  useImperativeHandle(ref, () => ({\n    print: () => {\n      if (!reportData || !Array.isArray(reportData.data) || reportData.data.length === 0) {\n        alert('No data to print.');\n        return;\n      }\n      const headers = getHeaders();\n      // (old flat rows building removed â€” we now build `punches` and `sortedRecords` below)\n\n      const reportTitle = reportType === 'attendance' ? 'History Transaction Report' : 'Meal Consumption Report';\n      const subtitle = reportType === 'attendance' ? 'All Granted(ID & FP) Records' : 'All Meal Records';\n\n      // Build flat punches and sort (date, emp, time, IN before OUT)\n      const punches = [];\n      // Determine date order: prefer reportData.dates if present\n      let dateOrder = Array.isArray(reportData.dates) && reportData.dates.length > 0 ? reportData.dates : [];\n      if (dateOrder.length === 0) {\n        const dateSet = new Set();\n        reportData.data.forEach(emp => {\n          if (Array.isArray(emp.punches)) emp.punches.forEach(p => dateSet.add(p.date || p.punchDate || p.date_));\n          if (emp.dailyAttendance) Object.keys(emp.dailyAttendance).forEach(k => dateSet.add(k));\n        });\n        dateOrder = Array.from(dateSet).sort((a, b) => new Date(a) - new Date(b));\n      }\n\n      // Create punches in date-first order\n      dateOrder.forEach(date => {\n        reportData.data.forEach(emp => {\n          if (Array.isArray(emp.punches) && emp.punches.length) {\n            emp.punches.filter(p => String(p.date || p.punchDate || p.date_) === String(date)).forEach((p, pIndex) => {\n              const inferredType = p && (p.scan_type || p.type || p.direction) ? p.scan_type || p.type || p.direction : pIndex % 2 === 0 ? 'IN' : 'OUT';\n              punches.push({\n                employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n                employee_name: emp.employeeName || emp.employee_name || emp.name,\n                date_: date,\n                time_: p.time || p.punchTime || p.time_ || '',\n                scan_type: inferredType\n              });\n            });\n          } else if (emp.dailyAttendance && emp.dailyAttendance[date]) {\n            const dayData = emp.dailyAttendance[date];\n            if (Array.isArray(dayData.punches) && dayData.punches.length) {\n              dayData.punches.forEach((p, pIndex) => {\n                const inferredType = p && (p.scan_type || p.type || p.direction) ? p.scan_type || p.type || p.direction : pIndex % 2 === 0 ? 'IN' : 'OUT';\n                punches.push({\n                  employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n                  employee_name: emp.employeeName || emp.employee_name || emp.name,\n                  date_: date,\n                  time_: p.time || '',\n                  scan_type: inferredType\n                });\n              });\n            } else {\n              if (dayData.checkIn) punches.push({\n                employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n                employee_name: emp.employeeName || emp.employee_name || emp.name,\n                date_: date,\n                time_: dayData.checkIn,\n                scan_type: 'IN'\n              });\n              if (dayData.checkOut) punches.push({\n                employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n                employee_name: emp.employeeName || emp.employee_name || emp.name,\n                date_: date,\n                time_: dayData.checkOut,\n                scan_type: 'OUT'\n              });\n            }\n          }\n        });\n      });\n\n      // Sort punches\n      punches.sort((a, b) => {\n        const da = new Date(a.date_ || '');\n        const db = new Date(b.date_ || '');\n        if (!isNaN(da.getTime()) && !isNaN(db.getTime())) {\n          if (da < db) return -1;\n          if (da > db) return 1;\n        } else {\n          if ((a.date_ || '') < (b.date_ || '')) return -1;\n          if ((a.date_ || '') > (b.date_ || '')) return 1;\n        }\n        const empA = String(a.employee_ID || '');\n        const empB = String(b.employee_ID || '');\n        if (empA < empB) return -1;\n        if (empA > empB) return 1;\n        const ta = a.time_ || '';\n        const tb = b.time_ || '';\n        if (ta < tb) return -1;\n        if (ta > tb) return 1;\n        const aIsIn = (a.scan_type || '').toUpperCase() === 'IN';\n        const bIsIn = (b.scan_type || '').toUpperCase() === 'IN';\n        if (aIsIn && !bIsIn) return -1;\n        if (!aIsIn && bIsIn) return 1;\n        return 0;\n      });\n\n      // Build sortedRecords with display punch date key\n      const sortedRecords = punches.map(p => {\n        const rec = {\n          ...p\n        };\n        const punchDate = new Date(p.date_);\n        rec._punchDateKey = !isNaN(punchDate.getTime()) ? punchDate.toLocaleDateString('en-GB', {\n          day: '2-digit',\n          month: 'short',\n          year: '2-digit'\n        }).replace(/\\//g, '-') + ' ' + punchDate.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }) : p.date_;\n        return rec;\n      });\n\n      // Build pages with date headers and duplicate suppression; start new page on date change\n      // Reserve a couple of record rows at the bottom of each printed page for spacing/signature\n      const PAGE_RECORDS = 31; // visual target per page including reserved rows\n      const RESERVED_ROWS = 2; // number of empty record slots to leave at bottom of each page\n      const ROWS_PER_PAGE = Math.max(1, PAGE_RECORDS - RESERVED_ROWS);\n      const pages = [];\n      let currentPage = [];\n      let lastKey = null;\n      let lastDateHeader = null;\n      let currentCount = 0;\n      const pushPage = () => {\n        if (currentPage.length > 0) {\n          pages.push(currentPage.slice());\n          currentPage = [];\n          currentCount = 0;\n          lastKey = null;\n        }\n      };\n      sortedRecords.forEach(record => {\n        const dateHeader = record._punchDateKey || record.date_ || '';\n        if (lastDateHeader !== dateHeader) {\n          lastDateHeader = dateHeader;\n          // inject date header row (highlighted to match preview) without forcing a page break\n          currentPage.push(`<tr style=\"background: #dfe7ff;\"><td colspan=\"7\" style=\"font-weight: 700; font-size: 11px; color: #000; text-align: left; padding: 10px 14px; border: 1px solid #0a0a0aff;\">Date: ${dateHeader}</td></tr>`);\n          currentCount++;\n          lastKey = null;\n        }\n        const row = formatRow(record);\n        const empIdVal = record.employee_ID || record.employeeId || record.emp_no || record.empNo || '';\n        const dateVal = dateHeader;\n        const key = `${empIdVal}||${dateVal}`;\n        if (lastKey === key) {\n          if (row.length > 0) row[0] = '';\n          if (row.length > 1) row[1] = '';\n          if (row.length > 2) row[2] = '';\n          if (row.length > 3) row[3] = '';\n        } else lastKey = key;\n        currentPage.push(`<tr>${row.map((cell, ci) => `<td style=\"border: 1px solid #000; padding: 4px 6px; text-align: left; font-size: 11px; white-space: pre-line;\">${ci === 0 ? '<strong>' + cell + '</strong>' : cell}</td>`).join('')}</tr>`);\n        currentCount++;\n        if (currentCount >= ROWS_PER_PAGE) pushPage();\n      });\n      if (currentPage.length > 0) pages.push(currentPage.slice());\n      const totalPages = pages.length || 1;\n      const renderPage = (pageRows, pageNum) => `\n        <div class=\"common-header\" style=\"page-break-before: ${pageNum > 1 ? 'always' : 'auto'}; width:100%;\">\n          <div class=\"report-header\" style=\"padding:8px 0; margin-bottom:6px;\">\n            <div class=\"header-content\" style=\"max-width:1200px; margin:0 auto; padding:0 12px; text-align:left; display:flex; justify-content:space-between; align-items:flex-start;\">\n              <div style=\"max-width:70%;\">\n                <h1 style=\"margin:0; display:flex; align-items:center; gap:8px; font-family: 'Courier New', monospace; font-size:14px;\">${reportTitle}</h1>\n                <div class=\"header-subtitle\" style=\"font-size:11px; margin-top:4px;\"><strong>${subtitle}</strong></div>\n                <div style=\"height:8px\">&nbsp;</div>\n                <div class=\"date-range\" style=\"margin-top:6px; font-size:11px;\"><strong>Date From :</strong> ${dateRange.startDate} <strong>To :</strong> ${dateRange.endDate}</div>\n              </div>\n              <div style=\"text-align:left; font-size:11px;\" class=\"print-meta\">\n                <div style=\"font-size:11px\">Printed Date : ${new Date().toLocaleDateString()}</div>\n                <div style=\"font-size:11px\">Printed Time : ${new Date().toLocaleTimeString()}</div>\n                <div style=\"font-size:11px\">Page ${pageNum} of ${totalPages}</div>\n              </div>\n            </div>\n          </div>\n          <div class=\"header-content\" style=\"max-width:1200px; margin:0 auto; padding:0 12px;\">\n            <table style=\"width:100%; border-collapse: collapse;\">\n              <thead>\n                <tr>${headers.map(h => `<th style=\"font-size:12px; padding:4px 2px; border:0.5px solid #000; text-align:left;\">${h}</th>`).join('')}</tr>\n              </thead>\n              <tbody>\n                ${pageRows.join('')}\n              </tbody>\n            </table>\n          </div>\n          ${pageNum === totalPages ? `\n            <div style=\"margin-top: 60px; width: 100%;\">\n              <table style=\"width:100%; border-collapse: collapse; border: none;\">\n                <tbody>\n                  <tr>\n                    <td style=\"width:15%; vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Date</td>\n                    <td style=\"width:35%; vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\n                    <td style=\"width:15%; vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Date</td>\n                    <td style=\"width:35%; vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\n                  </tr>\n                  <tr>\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Authorized Signature 1</td>\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Authorized Signature 2</td>\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          ` : ''}\n        </div>`;\n      const html = `<!DOCTYPE html><html><head><meta charset=\"utf-8\"/><title>${reportTitle}</title><style>\n        body{font-family:'Courier New',monospace;font-size:11px;margin:20px;padding:24px 24px 0 24px}\n        table{width:100%;border-collapse:collapse;margin-bottom:20px}\n  th,td{border:0.5px solid #000;padding:4px 6px;text-align:left}\n  th{background:#f5f5f5;font-weight:bold;font-size:12px}\n        td{font-size:11px;white-space:pre-line}\n        @media print{@page{margin:0.5in;size:landscape}body{margin:0}thead{display:table-header-group!important}@page{margin-top:0;margin-bottom:0;margin-left:0;margin-right:0}body::before,body::after{display:none!important}}\n      </style></head><body>${pages.map((p, idx) => renderPage(p, idx + 1)).join('')}</body></html>`;\n      const w = window.open(' ', '', 'width=900,height=700');\n      w.document.open();\n      w.document.write(html);\n      w.document.close();\n      w.focus();\n      w.print();\n      w.close();\n    }\n  }));\n\n  // preview rendering: build punches, sort, inject date headers and suppress duplicate Emp/Name/Date\n  const headers = getHeaders();\n  const previewElements = [];\n  if (reportData && Array.isArray(reportData.data)) {\n    // build punches in date-first order\n    const punches = [];\n    let dateOrder = Array.isArray(reportData.dates) && reportData.dates.length > 0 ? reportData.dates : [];\n    if (dateOrder.length === 0) {\n      const dateSet = new Set();\n      reportData.data.forEach(emp => {\n        if (Array.isArray(emp.punches)) emp.punches.forEach(p => dateSet.add(p.date || p.punchDate || p.date_));\n        if (emp.dailyAttendance) Object.keys(emp.dailyAttendance).forEach(k => dateSet.add(k));\n      });\n      dateOrder = Array.from(dateSet).sort((a, b) => new Date(a) - new Date(b));\n    }\n    dateOrder.forEach(date => {\n      reportData.data.forEach(emp => {\n        if (Array.isArray(emp.punches) && emp.punches.length) {\n          emp.punches.filter(p => String(p.date || p.punchDate || p.date_) === String(date)).forEach((p, pIndex) => {\n            const inferredType = p && (p.scan_type || p.type || p.direction) ? p.scan_type || p.type || p.direction : pIndex % 2 === 0 ? 'IN' : 'OUT';\n            punches.push({\n              employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n              employee_name: emp.employeeName || emp.employee_name || emp.name,\n              date_: date,\n              time_: p.time || p.punchTime || p.time_ || '',\n              scan_type: inferredType\n            });\n          });\n        } else if (emp.dailyAttendance && emp.dailyAttendance[date]) {\n          const dayData = emp.dailyAttendance[date];\n          if (Array.isArray(dayData.punches) && dayData.punches.length) {\n            dayData.punches.forEach((p, pIndex) => {\n              const inferredType = p && (p.scan_type || p.type || p.direction) ? p.scan_type || p.type || p.direction : pIndex % 2 === 0 ? 'IN' : 'OUT';\n              punches.push({\n                employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n                employee_name: emp.employeeName || emp.employee_name || emp.name,\n                date_: date,\n                time_: p.time || '',\n                scan_type: inferredType\n              });\n            });\n          } else {\n            if (dayData.checkIn) punches.push({\n              employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n              employee_name: emp.employeeName || emp.employee_name || emp.name,\n              date_: date,\n              time_: dayData.checkIn,\n              scan_type: 'IN'\n            });\n            if (dayData.checkOut) punches.push({\n              employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\n              employee_name: emp.employeeName || emp.employee_name || emp.name,\n              date_: date,\n              time_: dayData.checkOut,\n              scan_type: 'OUT'\n            });\n          }\n        }\n      });\n    });\n\n    // sort punches\n    punches.sort((a, b) => {\n      const da = new Date(a.date_ || '');\n      const db = new Date(b.date_ || '');\n      if (!isNaN(da.getTime()) && !isNaN(db.getTime())) {\n        if (da < db) return -1;\n        if (da > db) return 1;\n      } else {\n        if ((a.date_ || '') < (b.date_ || '')) return -1;\n        if ((a.date_ || '') > (b.date_ || '')) return 1;\n      }\n      const empA = String(a.employee_ID || '');\n      const empB = String(b.employee_ID || '');\n      if (empA < empB) return -1;\n      if (empA > empB) return 1;\n      const ta = a.time_ || '';\n      const tb = b.time_ || '';\n      if (ta < tb) return -1;\n      if (ta > tb) return 1;\n      const aIsIn = (a.scan_type || '').toUpperCase() === 'IN';\n      const bIsIn = (b.scan_type || '').toUpperCase() === 'IN';\n      if (aIsIn && !bIsIn) return -1;\n      if (!aIsIn && bIsIn) return 1;\n      return 0;\n    });\n\n    // build preview elements: inject date headers and suppress duplicates, limit to first 100 display rows\n    let lastKey = null;\n    let lastDateSeen = null;\n    let displayCount = 0;\n    const MAX_PREVIEW = 100;\n    for (let i = 0; i < punches.length && displayCount < MAX_PREVIEW; i++) {\n      const p = punches[i];\n      const dateVal = p.date_ || '';\n      if (lastDateSeen !== dateVal) {\n        // insert date header row â€” apply background to TD to prevent Bootstrap row striping from hiding it\n        previewElements.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: 7,\n            style: {\n              background: '#dfe7ff',\n              fontWeight: 700,\n              fontSize: '11px',\n              color: '#000',\n              textAlign: 'left',\n              padding: '10px 14px',\n              border: '1px solid #c7d2e8'\n            },\n            children: `Date: ${new Date(dateVal).toLocaleDateString('en-GB', {\n              day: '2-digit',\n              month: 'short',\n              year: '2-digit'\n            }).replace(/\\//g, '-')} ${new Date(dateVal).toLocaleDateString('en-US', {\n              weekday: 'short'\n            })}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)\n        }, `date-header-${dateVal}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this));\n        lastDateSeen = dateVal;\n        lastKey = null;\n        displayCount++;\n        if (displayCount >= MAX_PREVIEW) break;\n      }\n      const row = formatRow(p);\n      const empIdVal = p.employee_ID || p.employeeId || '';\n      const key = `${empIdVal}||${dateVal}`;\n      if (lastKey === key) {\n        if (row.length > 0) row[0] = '';\n        if (row.length > 1) row[1] = '';\n        if (row.length > 2) row[2] = '';\n        if (row.length > 3) row[3] = '';\n      } else {\n        lastKey = key;\n      }\n      previewElements.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, ci) => /*#__PURE__*/_jsxDEV(\"td\", {\n          style: {\n            whiteSpace: 'pre-line',\n            textAlign: 'left',\n            fontSize: '11px',\n            padding: '4px 6px',\n            verticalAlign: 'middle',\n            border: '1px solid #dee2e6'\n          },\n          children: ci === 0 ? /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: cell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 27\n          }, this) : cell\n        }, ci, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this))\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this));\n      displayCount++;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      style: {\n        width: '100%',\n        borderCollapse: 'collapse'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headers.map((h, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              fontSize: '12px',\n              background: '#f5f5f5',\n              fontWeight: 'bold',\n              padding: '4px 2px',\n              border: '0.5px solid #dee2e6',\n              textAlign: 'left'\n            },\n            children: h\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 39\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: previewElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), reportData && reportData.data && reportData.data.length > 100 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"preview-note\",\n      children: \"Showing first 100 records. Use print for full report.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 74\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n}, \"PYzlZ2AGFM0KxtNOGoZVRb5EOEw=\")), \"PYzlZ2AGFM0KxtNOGoZVRb5EOEw=\");\n_c2 = GroupReport;\nexport default GroupReport;\nvar _c, _c2;\n$RefreshReg$(_c, \"GroupReport$forwardRef\");\n$RefreshReg$(_c2, \"GroupReport\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","jsxDEV","_jsxDEV","GroupReport","_s","_c","reportData","getHeaders","formatRow","reportType","dateRange","ref","print","Array","isArray","data","length","alert","headers","reportTitle","subtitle","punches","dateOrder","dates","dateSet","Set","forEach","emp","p","add","date","punchDate","date_","dailyAttendance","Object","keys","k","from","sort","a","b","Date","filter","String","pIndex","inferredType","scan_type","type","direction","push","employee_ID","employeeId","emp_no","empNo","employee_name","employeeName","name","time_","time","punchTime","dayData","checkIn","checkOut","da","db","isNaN","getTime","empA","empB","ta","tb","aIsIn","toUpperCase","bIsIn","sortedRecords","map","rec","_punchDateKey","toLocaleDateString","day","month","year","replace","weekday","PAGE_RECORDS","RESERVED_ROWS","ROWS_PER_PAGE","Math","max","pages","currentPage","lastKey","lastDateHeader","currentCount","pushPage","slice","record","dateHeader","row","empIdVal","dateVal","key","cell","ci","join","totalPages","renderPage","pageRows","pageNum","startDate","endDate","toLocaleTimeString","h","html","idx","w","window","open","document","write","close","focus","previewElements","lastDateSeen","displayCount","MAX_PREVIEW","i","children","colSpan","style","background","fontWeight","fontSize","color","textAlign","padding","border","fileName","_jsxFileName","lineNumber","columnNumber","whiteSpace","verticalAlign","className","width","borderCollapse","_c2","$RefreshReg$"],"sources":["C:/Users/User/Documents/Project/af2/TimeTracker_SLPA/frontend/src/components/dashboard/GroupReport.jsx"],"sourcesContent":["import React, { forwardRef, useImperativeHandle } from 'react';\r\n\r\nconst GroupReport = forwardRef(({ reportData, getHeaders, formatRow, reportType, dateRange }, ref) => {\r\n  useImperativeHandle(ref, () => ({\r\n    print: () => {\r\n      if (!reportData || !Array.isArray(reportData.data) || reportData.data.length === 0) {\r\n        alert('No data to print.');\r\n        return;\r\n      }\r\n      const headers = getHeaders();\r\n      // (old flat rows building removed â€” we now build `punches` and `sortedRecords` below)\r\n\r\n      const reportTitle = reportType === 'attendance' ? 'History Transaction Report' : 'Meal Consumption Report';\r\n      const subtitle = reportType === 'attendance' ? 'All Granted(ID & FP) Records' : 'All Meal Records';\r\n\r\n      // Build flat punches and sort (date, emp, time, IN before OUT)\r\n      const punches = [];\r\n      // Determine date order: prefer reportData.dates if present\r\n      let dateOrder = Array.isArray(reportData.dates) && reportData.dates.length > 0 ? reportData.dates : [];\r\n      if (dateOrder.length === 0) {\r\n        const dateSet = new Set();\r\n        reportData.data.forEach(emp => {\r\n          if (Array.isArray(emp.punches)) emp.punches.forEach(p => dateSet.add(p.date || p.punchDate || p.date_));\r\n          if (emp.dailyAttendance) Object.keys(emp.dailyAttendance).forEach(k => dateSet.add(k));\r\n        });\r\n        dateOrder = Array.from(dateSet).sort((a,b) => new Date(a)-new Date(b));\r\n      }\r\n\r\n      // Create punches in date-first order\r\n      dateOrder.forEach(date => {\r\n        reportData.data.forEach(emp => {\r\n          if (Array.isArray(emp.punches) && emp.punches.length) {\r\n            emp.punches.filter(p => String(p.date || p.punchDate || p.date_) === String(date)).forEach((p, pIndex) => {\r\n              const inferredType = (p && (p.scan_type || p.type || p.direction)) ? (p.scan_type || p.type || p.direction) : (pIndex % 2 === 0 ? 'IN' : 'OUT');\r\n              punches.push({\r\n                employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo,\r\n                employee_name: emp.employeeName || emp.employee_name || emp.name,\r\n                date_: date,\r\n                time_: p.time || p.punchTime || p.time_ || '',\r\n                scan_type: inferredType\r\n              });\r\n            });\r\n          } else if (emp.dailyAttendance && emp.dailyAttendance[date]) {\r\n            const dayData = emp.dailyAttendance[date];\r\n            if (Array.isArray(dayData.punches) && dayData.punches.length) {\r\n              dayData.punches.forEach((p, pIndex) => {\r\n                const inferredType = (p && (p.scan_type || p.type || p.direction)) ? (p.scan_type || p.type || p.direction) : (pIndex % 2 === 0 ? 'IN' : 'OUT');\r\n                punches.push({ employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo, employee_name: emp.employeeName || emp.employee_name || emp.name, date_: date, time_: p.time || '', scan_type: inferredType });\r\n              });\r\n            } else {\r\n              if (dayData.checkIn) punches.push({ employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo, employee_name: emp.employeeName || emp.employee_name || emp.name, date_: date, time_: dayData.checkIn, scan_type: 'IN' });\r\n              if (dayData.checkOut) punches.push({ employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo, employee_name: emp.employeeName || emp.employee_name || emp.name, date_: date, time_: dayData.checkOut, scan_type: 'OUT' });\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Sort punches\r\n      punches.sort((a,b)=>{\r\n        const da = new Date(a.date_|| ''); const db = new Date(b.date_|| '');\r\n        if (!isNaN(da.getTime()) && !isNaN(db.getTime())) { if (da < db) return -1; if (da > db) return 1; }\r\n        else { if ((a.date_||'') < (b.date_||'')) return -1; if ((a.date_||'') > (b.date_||'')) return 1; }\r\n        const empA = String(a.employee_ID||''); const empB = String(b.employee_ID||''); if (empA < empB) return -1; if (empA > empB) return 1;\r\n        const ta = a.time_||''; const tb = b.time_||''; if (ta < tb) return -1; if (ta > tb) return 1;\r\n        const aIsIn = (a.scan_type||'').toUpperCase() === 'IN'; const bIsIn = (b.scan_type||'').toUpperCase() === 'IN'; if (aIsIn && !bIsIn) return -1; if (!aIsIn && bIsIn) return 1; return 0;\r\n      });\r\n\r\n      // Build sortedRecords with display punch date key\r\n      const sortedRecords = punches.map(p => {\r\n        const rec = { ...p };\r\n        const punchDate = new Date(p.date_);\r\n        rec._punchDateKey = !isNaN(punchDate.getTime()) ? (punchDate.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: '2-digit' }).replace(/\\//g,'-') + ' ' + punchDate.toLocaleDateString('en-US', { weekday: 'short' })) : p.date_;\r\n        return rec;\r\n      });\r\n\r\n      // Build pages with date headers and duplicate suppression; start new page on date change\r\n  // Reserve a couple of record rows at the bottom of each printed page for spacing/signature\r\n  const PAGE_RECORDS = 31; // visual target per page including reserved rows\r\n  const RESERVED_ROWS = 2; // number of empty record slots to leave at bottom of each page\r\n  const ROWS_PER_PAGE = Math.max(1, PAGE_RECORDS - RESERVED_ROWS);\r\n      const pages = [];\r\n      let currentPage = []; let lastKey = null; let lastDateHeader = null; let currentCount = 0;\r\n      const pushPage = () => { if (currentPage.length>0) { pages.push(currentPage.slice()); currentPage=[]; currentCount=0; lastKey=null; } };\r\n\r\n      sortedRecords.forEach(record => {\r\n        const dateHeader = record._punchDateKey || (record.date_ || '');\r\n        if (lastDateHeader !== dateHeader) {\r\n          lastDateHeader = dateHeader;\r\n          // inject date header row (highlighted to match preview) without forcing a page break\r\n          currentPage.push(`<tr style=\"background: #dfe7ff;\"><td colspan=\"7\" style=\"font-weight: 700; font-size: 11px; color: #000; text-align: left; padding: 10px 14px; border: 1px solid #0a0a0aff;\">Date: ${dateHeader}</td></tr>`);\r\n          currentCount++; lastKey = null;\r\n        }\r\n\r\n        const row = formatRow(record);\r\n        const empIdVal = record.employee_ID || record.employeeId || record.emp_no || record.empNo || '';\r\n        const dateVal = dateHeader;\r\n        const key = `${empIdVal}||${dateVal}`;\r\n        if (lastKey === key) {\r\n          if (row.length>0) row[0]=''; if (row.length>1) row[1]=''; if (row.length>2) row[2]=''; if (row.length>3) row[3]='';\r\n        } else lastKey = key;\r\n\r\n        currentPage.push(`<tr>${row.map((cell,ci)=>`<td style=\"border: 1px solid #000; padding: 4px 6px; text-align: left; font-size: 11px; white-space: pre-line;\">${ci===0?'<strong>'+cell+'</strong>':cell}</td>`).join('')}</tr>`);\r\n        currentCount++;\r\n        if (currentCount >= ROWS_PER_PAGE) pushPage();\r\n      });\r\n      if (currentPage.length>0) pages.push(currentPage.slice());\r\n      const totalPages = pages.length || 1;\r\n\r\n      const renderPage = (pageRows, pageNum) => `\r\n        <div class=\"common-header\" style=\"page-break-before: ${pageNum > 1 ? 'always' : 'auto'}; width:100%;\">\r\n          <div class=\"report-header\" style=\"padding:8px 0; margin-bottom:6px;\">\r\n            <div class=\"header-content\" style=\"max-width:1200px; margin:0 auto; padding:0 12px; text-align:left; display:flex; justify-content:space-between; align-items:flex-start;\">\r\n              <div style=\"max-width:70%;\">\r\n                <h1 style=\"margin:0; display:flex; align-items:center; gap:8px; font-family: 'Courier New', monospace; font-size:14px;\">${reportTitle}</h1>\r\n                <div class=\"header-subtitle\" style=\"font-size:11px; margin-top:4px;\"><strong>${subtitle}</strong></div>\r\n                <div style=\"height:8px\">&nbsp;</div>\r\n                <div class=\"date-range\" style=\"margin-top:6px; font-size:11px;\"><strong>Date From :</strong> ${dateRange.startDate} <strong>To :</strong> ${dateRange.endDate}</div>\r\n              </div>\r\n              <div style=\"text-align:left; font-size:11px;\" class=\"print-meta\">\r\n                <div style=\"font-size:11px\">Printed Date : ${new Date().toLocaleDateString()}</div>\r\n                <div style=\"font-size:11px\">Printed Time : ${new Date().toLocaleTimeString()}</div>\r\n                <div style=\"font-size:11px\">Page ${pageNum} of ${totalPages}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"header-content\" style=\"max-width:1200px; margin:0 auto; padding:0 12px;\">\r\n            <table style=\"width:100%; border-collapse: collapse;\">\r\n              <thead>\r\n                <tr>${headers.map(h=>`<th style=\"font-size:12px; padding:4px 2px; border:0.5px solid #000; text-align:left;\">${h}</th>`).join('')}</tr>\r\n              </thead>\r\n              <tbody>\r\n                ${pageRows.join('')}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          ${pageNum === totalPages ? `\r\n            <div style=\"margin-top: 60px; width: 100%;\">\r\n              <table style=\"width:100%; border-collapse: collapse; border: none;\">\r\n                <tbody>\r\n                  <tr>\r\n                    <td style=\"width:15%; vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Date</td>\r\n                    <td style=\"width:35%; vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\r\n                    <td style=\"width:15%; vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Date</td>\r\n                    <td style=\"width:35%; vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Authorized Signature 1</td>\r\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\r\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; font-size:11px; white-space: nowrap;\">Authorized Signature 2</td>\r\n                    <td style=\"vertical-align: middle; padding:6px 8px; border: none; white-space: nowrap;\"><span style=\"display:inline-block; font-family: 'Courier New', monospace; font-size:9px; letter-spacing:1px; line-height:1;\">....................</span></td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ` : ''}\r\n        </div>`;\r\n\r\n      const html = `<!DOCTYPE html><html><head><meta charset=\"utf-8\"/><title>${reportTitle}</title><style>\r\n        body{font-family:'Courier New',monospace;font-size:11px;margin:20px;padding:24px 24px 0 24px}\r\n        table{width:100%;border-collapse:collapse;margin-bottom:20px}\r\n  th,td{border:0.5px solid #000;padding:4px 6px;text-align:left}\r\n  th{background:#f5f5f5;font-weight:bold;font-size:12px}\r\n        td{font-size:11px;white-space:pre-line}\r\n        @media print{@page{margin:0.5in;size:landscape}body{margin:0}thead{display:table-header-group!important}@page{margin-top:0;margin-bottom:0;margin-left:0;margin-right:0}body::before,body::after{display:none!important}}\r\n      </style></head><body>${pages.map((p,idx)=>renderPage(p, idx+1)).join('')}</body></html>`;\r\n\r\n      const w = window.open(' ', '', 'width=900,height=700');\r\n      w.document.open(); w.document.write(html); w.document.close(); w.focus(); w.print(); w.close();\r\n    }\r\n  }));\r\n\r\n  // preview rendering: build punches, sort, inject date headers and suppress duplicate Emp/Name/Date\r\n  const headers = getHeaders();\r\n  const previewElements = [];\r\n  if (reportData && Array.isArray(reportData.data)) {\r\n    // build punches in date-first order\r\n    const punches = [];\r\n    let dateOrder = Array.isArray(reportData.dates) && reportData.dates.length > 0 ? reportData.dates : [];\r\n    if (dateOrder.length === 0) {\r\n      const dateSet = new Set();\r\n      reportData.data.forEach(emp => {\r\n        if (Array.isArray(emp.punches)) emp.punches.forEach(p => dateSet.add(p.date || p.punchDate || p.date_));\r\n        if (emp.dailyAttendance) Object.keys(emp.dailyAttendance).forEach(k => dateSet.add(k));\r\n      });\r\n      dateOrder = Array.from(dateSet).sort((a,b) => new Date(a)-new Date(b));\r\n    }\r\n\r\n    dateOrder.forEach(date => {\r\n      reportData.data.forEach(emp => {\r\n        if (Array.isArray(emp.punches) && emp.punches.length) {\r\n          emp.punches.filter(p => String(p.date || p.punchDate || p.date_) === String(date)).forEach((p, pIndex) => {\r\n            const inferredType = (p && (p.scan_type || p.type || p.direction)) ? (p.scan_type || p.type || p.direction) : (pIndex % 2 === 0 ? 'IN' : 'OUT');\r\n            punches.push({ employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo, employee_name: emp.employeeName || emp.employee_name || emp.name, date_: date, time_: p.time || p.punchTime || p.time_ || '', scan_type: inferredType });\r\n          });\r\n        } else if (emp.dailyAttendance && emp.dailyAttendance[date]) {\r\n          const dayData = emp.dailyAttendance[date];\r\n          if (Array.isArray(dayData.punches) && dayData.punches.length) {\r\n            dayData.punches.forEach((p, pIndex) => {\r\n              const inferredType = (p && (p.scan_type || p.type || p.direction)) ? (p.scan_type || p.type || p.direction) : (pIndex % 2 === 0 ? 'IN' : 'OUT');\r\n              punches.push({ employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo, employee_name: emp.employeeName || emp.employee_name || emp.name, date_: date, time_: p.time || '', scan_type: inferredType });\r\n            });\r\n          } else {\r\n            if (dayData.checkIn) punches.push({ employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo, employee_name: emp.employeeName || emp.employee_name || emp.name, date_: date, time_: dayData.checkIn, scan_type: 'IN' });\r\n            if (dayData.checkOut) punches.push({ employee_ID: emp.employeeId || emp.employee_ID || emp.emp_no || emp.empNo, employee_name: emp.employeeName || emp.employee_name || emp.name, date_: date, time_: dayData.checkOut, scan_type: 'OUT' });\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // sort punches\r\n    punches.sort((a,b) => {\r\n      const da = new Date(a.date_||''); const db = new Date(b.date_||'');\r\n      if (!isNaN(da.getTime()) && !isNaN(db.getTime())) { if (da < db) return -1; if (da > db) return 1; } else { if ((a.date_||'') < (b.date_||'')) return -1; if ((a.date_||'') > (b.date_||'')) return 1; }\r\n      const empA = String(a.employee_ID||''); const empB = String(b.employee_ID||''); if (empA < empB) return -1; if (empA > empB) return 1;\r\n      const ta = a.time_||''; const tb = b.time_||''; if (ta < tb) return -1; if (ta > tb) return 1;\r\n      const aIsIn = (a.scan_type||'').toUpperCase() === 'IN'; const bIsIn = (b.scan_type||'').toUpperCase() === 'IN'; if (aIsIn && !bIsIn) return -1; if (!aIsIn && bIsIn) return 1; return 0;\r\n    });\r\n\r\n    // build preview elements: inject date headers and suppress duplicates, limit to first 100 display rows\r\n    let lastKey = null; let lastDateSeen = null; let displayCount = 0; const MAX_PREVIEW = 100;\r\n    for (let i = 0; i < punches.length && displayCount < MAX_PREVIEW; i++) {\r\n      const p = punches[i];\r\n      const dateVal = p.date_ || '';\r\n      if (lastDateSeen !== dateVal) {\r\n        // insert date header row â€” apply background to TD to prevent Bootstrap row striping from hiding it\r\n        previewElements.push(\r\n          <tr key={`date-header-${dateVal}`}>\r\n            <td colSpan={7} style={{ background: '#dfe7ff', fontWeight: 700, fontSize: '11px', color: '#000', textAlign: 'left', padding: '10px 14px', border: '1px solid #c7d2e8' }}>\r\n              {`Date: ${new Date(dateVal).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: '2-digit' }).replace(/\\//g, '-')} ${new Date(dateVal).toLocaleDateString('en-US', { weekday: 'short' })}`}\r\n            </td>\r\n          </tr>\r\n        );\r\n        lastDateSeen = dateVal; lastKey = null; displayCount++;\r\n        if (displayCount >= MAX_PREVIEW) break;\r\n      }\r\n\r\n      const row = formatRow(p);\r\n      const empIdVal = p.employee_ID || p.employeeId || '';\r\n      const key = `${empIdVal}||${dateVal}`;\r\n      if (lastKey === key) {\r\n        if (row.length > 0) row[0] = '';\r\n        if (row.length > 1) row[1] = '';\r\n        if (row.length > 2) row[2] = '';\r\n        if (row.length > 3) row[3] = '';\r\n      } else {\r\n        lastKey = key;\r\n      }\r\n\r\n      previewElements.push(\r\n        <tr key={`row-${i}`}>\r\n          {row.map((cell, ci) => (\r\n            <td key={ci} style={{ whiteSpace: 'pre-line', textAlign: 'left', fontSize: '11px', padding: '4px 6px', verticalAlign: 'middle', border: '1px solid #dee2e6' }}>\r\n              {ci === 0 ? <strong>{cell}</strong> : cell}\r\n            </td>\r\n          ))}\r\n        </tr>\r\n      );\r\n      displayCount++;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"table table-striped\" style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n        <thead>\r\n          <tr>{headers.map((h, i) => (<th key={i} style={{ fontSize: '12px', background: '#f5f5f5', fontWeight: 'bold', padding: '4px 2px', border: '0.5px solid #dee2e6', textAlign: 'left' }}>{h}</th>))}</tr>\r\n        </thead>\r\n        <tbody>\r\n          {previewElements}\r\n        </tbody>\r\n      </table>\r\n      {reportData && reportData.data && reportData.data.length > 100 && (<p className=\"preview-note\">Showing first 100 records. Use print for full report.</p>)}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default GroupReport;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}