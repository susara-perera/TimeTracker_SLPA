{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Project\\\\af2\\\\TimeTracker_SLPA\\\\frontend\\\\src\\\\components\\\\dashboard\\\\RoleAccessManagement.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, /* useEffect, */useContext } from 'react';\nimport { AuthContext } from '../../context/AuthContext';\nimport RoleManagement from './RoleManagement';\nimport './RoleAccessManagement.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RoleAccessManagement = () => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  // const isSuperAdmin = user?.role === 'super_admin'; // Unused, kept for future use\n  const [showRoleManagement, setShowRoleManagement] = useState(false);\n\n  // ...existing code for permission management and UI remains, but unused variables/functions are removed...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"role-access-wrapper\",\n    children: showRoleManagement ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '16px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-manage-roles btn-secondary\",\n          onClick: () => setShowRoleManagement(false),\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-arrow-left\",\n            style: {\n              marginRight: '6px',\n              fontSize: '1.1rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 15\n          }, this), \" Back\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RoleManagement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(RoleAccessManagement, \"nifaM4q+h+OzAvjJVfEi/knh/UM=\");\n_c = RoleAccessManagement;\nexport default RoleAccessManagement;\nvar _c;\n$RefreshReg$(_c, \"RoleAccessManagement\");","map":{"version":3,"names":["React","useState","useContext","AuthContext","RoleManagement","jsxDEV","_jsxDEV","Fragment","_Fragment","RoleAccessManagement","_s","user","showRoleManagement","setShowRoleManagement","className","children","style","marginBottom","onClick","marginRight","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/Project/af2/TimeTracker_SLPA/frontend/src/components/dashboard/RoleAccessManagement.jsx"],"sourcesContent":["import React, { useState, /* useEffect, */ useContext } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport RoleManagement from './RoleManagement';\r\nimport './RoleAccessManagement.css';\r\n\r\nconst RoleAccessManagement = () => {\r\n  const { user } = useContext(AuthContext);\r\n  // const isSuperAdmin = user?.role === 'super_admin'; // Unused, kept for future use\r\n  const [showRoleManagement, setShowRoleManagement] = useState(false);\r\n\r\n\r\n  // ...existing code for permission management and UI remains, but unused variables/functions are removed...\r\n\r\n  return (\r\n    <div className=\"role-access-wrapper\">\r\n      {showRoleManagement ? (\r\n        <>\r\n          <div style={{ marginBottom: '16px' }}>\r\n            <button className=\"btn-manage-roles btn-secondary\" onClick={() => setShowRoleManagement(false)}>\r\n              <i className=\"bi bi-arrow-left\" style={{ marginRight: '6px', fontSize: '1.1rem' }}></i> Back\r\n            </button>\r\n          </div>\r\n          <RoleManagement />\r\n        </>\r\n      ) : (\r\n        <>\r\n          {/* ...existing code for permission management UI... */}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoleAccessManagement;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAE,gBAAiBC,UAAU,QAAQ,OAAO;AACpE,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpC,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAK,CAAC,GAAGT,UAAU,CAACC,WAAW,CAAC;EACxC;EACA,MAAM,CAACS,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAGnE;;EAEA,oBACEK,OAAA;IAAKQ,SAAS,EAAC,qBAAqB;IAAAC,QAAA,EACjCH,kBAAkB,gBACjBN,OAAA,CAAAE,SAAA;MAAAO,QAAA,gBACET,OAAA;QAAKU,KAAK,EAAE;UAAEC,YAAY,EAAE;QAAO,CAAE;QAAAF,QAAA,eACnCT,OAAA;UAAQQ,SAAS,EAAC,gCAAgC;UAACI,OAAO,EAAEA,CAAA,KAAML,qBAAqB,CAAC,KAAK,CAAE;UAAAE,QAAA,gBAC7FT,OAAA;YAAGQ,SAAS,EAAC,kBAAkB;YAACE,KAAK,EAAE;cAAEG,WAAW,EAAE,KAAK;cAAEC,QAAQ,EAAE;YAAS;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,SACzF;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACNlB,OAAA,CAACF,cAAc;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAClB,CAAC,gBAEHlB,OAAA,CAAAE,SAAA,mBAEE;EACH;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACd,EAAA,CA1BID,oBAAoB;AAAAgB,EAAA,GAApBhB,oBAAoB;AA4B1B,eAAeA,oBAAoB;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}